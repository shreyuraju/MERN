M : MongoDB
E : Express.js
R : React.js
N : Node.js



nvm install latest: To install the latest stable version

nvm list available: Show a list of versions available for download.

nvm use <version>: Switch to use the specified version.

in object key shld be Unique


if ther is an error of authorization, run this 3 cmds in terminal

Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted -Force
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass -Force
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

//creating react app                       //if you have already has folder go inside and run this cmd
1. npx create-react-app reactapp      ||    npm install //to download node_modules || npm update

2. npm react-router-dom --force       npm i --force

//to run react-app change directory to appfolder

3. npm start

//"npm i package-name"    it can be use to install
//"npm uninstall package-name"    it can used to uninstall



//JXS tags are used in return function in App.js  .jsx = javaScriptXML


//creating new component

create file as filename.jsx
type rfc (react functional component) and ENTER


//11/02/23
tags shold have 1 parent element(tags), this we can use <></> & <div></div>
we can add any tag to print

//STYLING

//inline styling and internal styling
style={{backgroundColor:"red", color:"green"}}    

//for internal
const mystyle = {
    color:"blue",
    backgroundColor:"yellow"
  }
style={mystyle}

for external
we need to create .css file and import to app.js to use it
import './extcss.css'

className='name'   //inside tags

if we want to import outside the folder we need to use ../folder-name/file-name

//ALL FILE SHOULD BE IN "src" FOLDER


ES6 is ECMaSCRIPT

//creaeing classes in components, before the return function
CLASS is a type of function
rt default function Classes() {
    class Car {
        constructor(name) {                 //its a syntax method
            this.brand=name;
        }
		Present() {                        //its a user defined method
            return "My Bike is "+ this.name
        }
    }

    const mycar = new Car("NISSAN");
//inside reurn function
{mycar.brand}

//we can also create user function as mentioned above
//for call the user function, in return function type

{mybike.Present()}

"  `   " //back click 
we can use to print

return `My Bike is ${this.name}`


//inheritence

//while coming on monday
create new class as Vehicle
print my new Vehicle is ...

////////////////////////////

130223
// VARIABLES
//ARRAYMETHODS

const myArray = ['Apple','Mango','Orange']

    let mapfunc = myArray.map((item)=><p>{item}</p>)
//in return write
{mapfunc}


//ordering
<ol>{myArray.map((item)=><li>{item}</li>)}</ol>

///////////////////////Map function VERY IMPORTANT///////////////////////////////////


////////////////////////////////150223

//Array of Objects to table
let details = [
      {name:"Rama", age:24},
      {name:"Lakshmana", age:22},
      {name:"Hanuma", age:45},
      {name:"Ravana", age:35}
    ]

<table border="1px">
        <tr>
          <th>Name</th>
          <th>Age</th>
        </tr>
        
        {details.map((item)=> {
          return(
            <tr><td>{item.name}</td><td>{item.age}</td></tr>
          )
        })}

      </table>

///Destrucuturing
const cars = ['mustang','f-150','bmw'];

    const car1 = cars[0]; //old method of Destrucuturing
    const car2 = cars[1]; //old method of Destrucuturing
    const car3 = cars[2]; //old method of Destrucuturing

    const [car11, car22, car33] = cars; //new method of Destructuring

//another example
const vehicle = {
      brand:'Ford',
      model:'Mustang',
      type:'car',
      year:2021,
      color:'red'
    }

    let msg;

    myVehicle(vehicle);

    function myVehicle({brand,model,type,color,year}) {
      msg = 'My '+type+' is a '+color+' '+brand+' '+model+'.';
    }

//in return
{msg} ///My car is a red Ford Mustang.

//nested object
const vehicleOne = {
      brand:'Ford',
      model:'Mustang',
      type:'car',
      year:2021,
      color:'red',
      registration :{
        city:'Houston',
        state:'Texas',
        country:'USA'
      }
    }
    var msgOne;
    myVehicleOne(vehicleOne);

    function myVehicleOne( {model, registration:{state} } ) {
      msgOne = 'My '+model+' is registered in '+state+'.';
    }

//in return

{msgOne}<br/>   //My Mustang is registered in Texas.


//spread Operator (...)

example
const numOne = [1,2,3,4];
  const numTwo = [5,6,7];
  const numComb = [...numOne, ...numTwo];   //const numComb = [...numOne, ...numTwo, 8, 9, 10];
						//1-10

{numOne}<br/> //1234
{numTwo}<br/> //567
{numComb}<br/> //1234567

//we can also do it for objects also
const numbers = [1,2,3,4,5,6];
const [one, two, ...three] = numbers; // decstructuring
	{one}<br/> //1
        {two}<br/> //2
        {three}<br/> //3456


//object
  const myVehicle = {
    brand:'Ford',
    model:'Mustang',
    color:'red'
  }
  const updateMyVehicle = {
    type:'car',
    year:2021,
    color: 'yellow'
  }

  const myUpdatedVehicle = { ...myVehicle, ...updateMyVehicle};
  console.log(myUpdatedVehicle);
//FRIDAY TEST 

classes, arrow, arrymethods, destructure, spread, 

//17022023
//////TernaryOperation

let a = true
a==true?alert('true'):alert('false')

	{
                a?
                <h2 style={{color:'green'}}>a is true</h2>
                :
                <h2 style={{color:'red'}}>a is false</h2>
            }

///////export:
there is 2 types
named and defult

////named export 
//2 type
 
1. inline induvidual export

export let name="Mahadeva"
export let age = 25

export function Hello() {
    alert('Hello Exp Function')
}

import { name, age, Hello } from './Exp'
<h2>{name}</h2>
        <h2>{age}</h2>
        {Hello()}
2. grouped export

let address = "Magaluru"
let phone = 234515
export {address, phone}

import { address, phone } from './Exp'
<h2>{address}</h2>
        <h2>{phone}</h2>

/////we can't export the varialble if it's already exported before

//default export
let course;
export default course = "React";

import course from './Exp';
<h2>{course}</h2>

//we can use default keyword only once  in file
//exporting Arrow function
let defuncn;
export  default defuncn = (name, clg) => {
    alert(`My name is ${name}, and i'm from ${clg}`)
}

or

const defuncn = (name, clg) => {
    alert(`My name is ${name}, and i'm from ${clg}`)
}
export default defuncn;

//we can't export multiple variable or functions

import defuncn from './Exp';
<button onClick={()=>defuncn('shreyas','Mite')}>click- me</button>



//direct React
//////we can write react inside html
//CDN content deliever networks


//////////////////ES6 : ECMAScript was created to standardize javascript
features,
classes 
arrow func
variables
array methods
destructuring
modules



//22022023

"let" :> keyword is a block code keyword, it connot be called from outside the function

//JSX  : javascriptXML



//components are individual and reuable bits of code, they serve
there are 2 type "rfc" % "rcc"


//////////////////IMP//////IMP/////IMP/////
//react props
props are arguments passed into react components
props are passed 

function Hello(props) {
    alert('This is the hello function, '+props.greet+' '+props.name);
}
const call = <Hello greet="Welcome" name="Rama"/>

{call}


    function Car(props) {
        return <h2>I have {props.brand}, {props.year}</h2>
    }

    const value = "BMW"
    const date = 2023
    const myElement = <Car brand={value} year={date} />
{myElement}

    /////
    function Hero(props) {
        return <h2>I'm {props.brand}!</h2>
    }

    function Demo(props) {
        return (
            <>
                <h2>Who is in my team</h2>
                <Hero brand={props.id} />
            </>
        );
    }
<Demo id="Rama"/>


///
we can even pass list values also
///////
    function College (props) {
        return <h3>I am {props.brand.name}, school is {props.brand.school} </h3>
    }

    function Students() {
        const Details ={name:"Jack", school:"Aloy"}
        return (
            <>
                <h3>who is admited</h3>
                <College brand={Details} />
            </>
        );
    }
<Students/>

//we can destructure the props using arry map attribute

    const fruits = ["apple", "banana","orange","mango"];

    const DisplayFruits = (props) => {
        return (
            <li>{props.item}</li>
        );
    }
{fruits.map((val)=> <DisplayFruits item={val}/> )}



/////print this using 
i have 4 fruits
They are
1. apple
2. banana
3. orange
4. mango



/////////React Events

///react conditional render
function Admitted() {
        return <h3 style={{color:'green'}}>Admitted</h3>
    }

    function NotAdmitted() {
        return <h3 style={{color:'red'}}>Not Admitted</h3>
    }
let course="bca"
{course=="bca"?<Admitted/>:<NotAdmitted/>}


//24022023

//////Routing pages

npm i -D react-router-dom

//we need to create an component for Routing

///hooks concepts on next class

///27022023

HOOKS CONCEPTS

1. useState //its like a variable
		//its a func to set value to variables, it can be used in constructors
using usestate we can create a form, array, object

2. useEffect //
